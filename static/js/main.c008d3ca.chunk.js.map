{"version":3,"sources":["ObservableTodoStore.js","TodoItem.jsx","TodoList.jsx","AddTodo.jsx","App.jsx","index.jsx"],"names":["observableTodoStore","this","todos","makeObservable","observable","completedTodosCount","computed","incompletedTodosCount","loadTodos","action","addTodo","deleteTodoAt","autorun","console","info","report","saveTodos","filter","todo","completed","length","nextTodo","find","text","push","completedAt","createdAt","Date","now","updatedAt","assignee","existingTodoDataString","window","localStorage","getItem","loadedTodos","JSON","parse","todoIndex","newTodos","splice","setTodos","setItem","stringify","UnstyledTodoItem","observer","className","index","handleDragStart","handleDragOver","handleDrop","todoId","todoKey","todoItemClassName","draggable","data-position","onDragStart","onDragOver","onDrop","type","id","checked","onChange","onClick","event","preventDefault","todoStore","TodoItem","styled","UnstyledTodoList","todoItems","map","todoItem","emptyStateMessage","TodoList","AddTodo","placeholder","initialDnDState","draggedFrom","draggedTo","isDragging","originalOrder","updatedOrder","UnstyledApp","useState","dragAndDrop","setDragAndDrop","onSubmit","formSubmitEvent","todoElement","document","getElementById","newTodoText","value","dragEvent","initialPosition","Number","currentTarget","dataset","position","dataTransfer","setData","todoDragged","remainingItems","item","slice","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c008d3ca.chunk.js","sourcesContent":["import { action, autorun, computed, makeObservable, observable } from \"mobx\";\n\nclass ObservableTodoStore {\n  constructor() {\n    this.todos = [];\n\n    makeObservable(this, {\n      todos: observable,\n      completedTodosCount: computed,\n      incompletedTodosCount: computed,\n      loadTodos: action,\n      addTodo: action,\n      deleteTodoAt: action,\n    })\n    /* eslint-disable-next-line no-console */\n    autorun(() => console.info(this.report))\n    this.loadTodos();\n    autorun(() => this.saveTodos())\n  }\n\n  get completedTodosCount() {\n    return this.todos.filter(\n      todo => todo.completed === true\n    ).length;\n  }\n\n  get incompletedTodosCount() {\n    return this.todos.filter(\n      todo => todo.completed === false\n    )\n  }\n\n  get report() {\n    if (this.todos.length ===  0) {\n      return \"<none>\";\n    }\n    const nextTodo = this.todos.find(todo => todo.completed === false);\n    return `Next todo: \"${nextTodo ? nextTodo.text : \"<none>\"}\". ` +\n    `Progress: ${this.completedTodosCount}/${this.todos.length}}`;\n  }\n\n  addTodo(text) {\n    this.todos.push({\n      text,\n      completed: false,\n      completedAt: null,\n      createdAt: Date.now(),\n      updatedAt: Date.now(),\n      assignee: null,\n    });\n  }\n\n  loadTodos() {\n    // Load from localstorage if data is there\n    const existingTodoDataString = window.localStorage.getItem(\"tododata\");\n    if (!existingTodoDataString) {\n      return;\n    }\n\n    const existingTodoData = JSON.parse(existingTodoDataString);\n    const loadedTodos = existingTodoData.todos;\n    this.todos = loadedTodos;\n  }\n\n  deleteTodoAt(todoIndex) {\n    const { todos } = this;\n    const newTodos = [...todos];\n    newTodos.splice(todoIndex, 1);\n    this.setTodos(newTodos);\n  }\n\n  saveTodos() {\n    const { todos } = this;\n    window.localStorage.setItem(\"tododata\", JSON.stringify({ todos }));\n  }\n\n  setTodos(newTodos) {\n    this.todos = newTodos;\n  }\n}\n\nconst observableTodoStore = new ObservableTodoStore();\nexport { observableTodoStore as default, ObservableTodoStore };","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport PropTypes from \"prop-types\";\nimport { observer } from 'mobx-react-lite';\nimport todoStore from \"./ObservableTodoStore\";\n\n\nconst UnstyledTodoItem = observer(({\n  className,\n  index,\n  todo,\n  handleDragStart,\n  handleDragOver,\n  handleDrop,\n}) => {\n  const { completed, text } = todo;\n  const todoId = `todoItem${index}`;\n  const todoKey = `${index}`;\n  const todoItemClassName = completed ? \"disabled\" : \"\";\n\n  const toggleCompleted = () => {\n    // eslint-disable-next-line no-param-reassign\n    todo.completed = !todo.completed\n  };\n\n  const handleDelete = (event) => {\n    event.preventDefault();\n    todoStore.deleteTodoAt(index)\n  };\n\n  return (\n    <li\n      key={todoKey}\n      className={`${className} ${todoItemClassName}`}\n      draggable\n      data-position={index}\n      onDragStart={handleDragStart}\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n    >\n\n      { /* eslint-disable-next-line jsx-a11y/label-has-associated-control */ }\n      <label>\n        <span className=\"dragIcon\">â‰”</span>\n        <input\n          type=\"checkbox\"\n          id={todoId}\n          checked={completed}\n          onChange={toggleCompleted}\n        />\n        <span className=\"todoText\">{text}</span>\n        <button type=\"button\" className=\"delete\" onClick={handleDelete}>\n          x\n        </button>\n      </label>\n    </li>\n  );\n});\n\nUnstyledTodoItem.propTypes = {\n  className: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  todo: PropTypes.shape({ text: PropTypes.string.isRequired, completed: PropTypes.bool.isRequired}).isRequired,\n  handleDragStart: PropTypes.func.isRequired,\n  handleDragOver: PropTypes.func.isRequired,\n  handleDrop: PropTypes.func.isRequired,\n};\n\nconst TodoItem = styled(UnstyledTodoItem)`\n  label {\n    border: 1px solid #61dafb;\n    padding: 1em;\n    margin: 0 0 1em;\n    width: 15em;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    :hover {\n      background: #c5ffff;\n      cursor: pointer;\n      color: #3c4048;\n    }\n\n    span.todoText {\n      flex-grow: 2;\n    }\n  }\n\n  input[type=\"checkbox\"] {\n    margin-right: 1em;\n    min-width: 2em;\n    min-height: 2em;\n  }\n\n  &.disabled {\n    label {\n      color: grey;\n      border: 1px solid grey;\n\n      :hover {\n        background: #464a52;\n        cursor: pointer;\n      }\n    }\n\n    input[type=\"checkbox\"] {\n      border: 1px solid grey;\n      opacity: 0.5;\n    }\n  }\n\n  .delete {\n    opacity: 0.75;\n    background-color: darkred;\n    border: 1px solid red;\n    border-radius: 2px;\n    height: 2em;\n    width: 2em;\n    color: white;\n    text-align: center;\n  }\n\n  .dragIcon {\n    cursor: grab;\n  }\n`;\n\nexport default TodoItem;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport PropTypes from \"prop-types\";\nimport { observer } from 'mobx-react-lite';\nimport TodoItem from \"./TodoItem\";\nimport todoStore from \"./ObservableTodoStore\";\n\nconst UnstyledTodoList = observer(({\n  className,\n  handleDragStart,\n  handleDragOver,\n  handleDrop,\n}) => {\n  const { todos } = todoStore;\n  const todoItems = todos.map((todoItem, todoIndex) => {\n\n    const todoKey = `${todoIndex}`;\n    return (\n      <TodoItem\n        key={todoKey}\n        index={todoIndex}\n        todo={todoItem}\n        handleDragStart={handleDragStart}\n        handleDragOver={handleDragOver}\n        handleDrop={handleDrop}\n      />\n    );\n  });\n\n  const emptyStateMessage = (\n    <li>\n      <p>Try adding a Todo above!</p>\n    </li>\n  );\n\n  return (\n    <ul className={className}>\n      {todoItems.length > 0 ? todoItems : emptyStateMessage}\n    </ul>\n  );\n});\n\nUnstyledTodoList.propTypes = {\n  className: PropTypes.string.isRequired,\n  handleDragStart: PropTypes.func.isRequired,\n  handleDragOver: PropTypes.func.isRequired,\n  handleDrop: PropTypes.func.isRequired,\n};\n\nconst TodoList = styled(UnstyledTodoList)`\n  li {\n    /* Specify this style here so the empty state will get it too. */\n    list-style: none;\n  }\n`;\n\nexport default TodoList;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport PropTypes from \"prop-types\";\n\nfunction UnstyledAddTodo({ className }) {\n  return (\n    <div className={className}>\n      <input type=\"text\" id=\"addTodo\" placeholder=\"Add a Todo\" />\n    </div>\n  );\n}\n\nUnstyledAddTodo.propTypes = {\n  className: PropTypes.string.isRequired,\n};\n\nconst AddTodo = styled(UnstyledAddTodo)`\n  input[type=\"text\"] {\n    border: 1px solid #61dafb;\n    border-radius: 0.5em;\n    padding: 1em;\n    margin: 0 0 1em;\n    display: block;\n    width: 50em;\n    color: white;\n    background: #3c4048;\n  }\n\n  input::placeholder {\n    color: #118aab;\n  }\n`;\n\nexport default AddTodo;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"@emotion/styled\";\nimport { observer } from 'mobx-react-lite';\nimport TodoList from \"./TodoList\";\nimport AddTodo from \"./AddTodo\";\nimport todoStore from \"./ObservableTodoStore\";\n\n// Following drag and drop tutorial at\n// https://dev.to/florantara/creating-a-drag-and-drop-list-with-react-hooks-4c0i\nconst initialDnDState = {\n  draggedFrom: null,\n  draggedTo: null,\n  isDragging: false,\n  originalOrder: [],\n  updatedOrder: [],\n}\n\nconst UnstyledApp = observer(({ className }) => {\n  const { todos } = todoStore;\n  const [dragAndDrop, setDragAndDrop] = useState(initialDnDState);\n\n  const handleAddTodo = (formSubmitEvent) => {\n    formSubmitEvent.preventDefault();\n\n    const todoElement = document.getElementById(\"addTodo\");\n    const newTodoText = todoElement.value;\n\n    todoStore.addTodo(newTodoText)\n    todoElement.value = \"\";\n  };\n\n  const handleDragStart = (dragEvent) => {\n    // Access the \"data-position\" attr of the current element being dragged\n    const initialPosition = Number(dragEvent.currentTarget.dataset.position);\n\n    setDragAndDrop({\n      ...dragAndDrop,\n      draggedFrom: initialPosition,\n      isDragging: true,\n      originalOrder: todos,\n    });\n\n    // Note: This is only needed for Firefox.\n    // Otherwise, DragAndDrop won't work.\n    // But we aren't using it.\n    dragEvent.dataTransfer.setData('text/html', '');\n  };\n\n  const handleDragOver = (dragEvent) => {\n    dragEvent.preventDefault();\n\n    let newTodos = dragAndDrop.originalOrder;\n    const { draggedFrom } = dragAndDrop;\n\n    // Index of the drop area being hovered\n    const draggedTo = Number(dragEvent.currentTarget.dataset.position);\n    // Get the element that's at the position of 'draggedFrom'\n    const todoDragged = newTodos[draggedFrom];\n    const remainingItems = newTodos.filter((item, index) => index !== draggedFrom);\n\n    // Update the list\n    newTodos = [\n      ...remainingItems.slice(0, draggedTo),\n      todoDragged,\n      ...remainingItems.slice(draggedTo),\n    ];\n\n    // Since this event fires many times, check if the targets are different\n    // before updating.\n    if(draggedTo !== dragAndDrop.draggedTo) {\n      setDragAndDrop({...dragAndDrop,\n      updatedOrder: newTodos,\n      draggedTo,\n    })\n    }\n  };\n\n  const handleDrop = () => {\n    todoStore.setTodos(dragAndDrop.updatedOrder);\n\n    // Reset the state of the drag and drop\n    setDragAndDrop({\n      ...dragAndDrop,\n      draggedFrom: null,\n      draggedTo: null,\n      isDragging: false,\n    });\n  }\n\n  return (\n    <div className={className}>\n      <form onSubmit={handleAddTodo}>\n        <AddTodo />\n\n        <hr />\n\n        <TodoList\n          todoStore={todoStore}\n          handleDragStart={handleDragStart}\n          handleDragOver={handleDragOver}\n          handleDrop={handleDrop}\n        />\n      </form>\n    </div>\n  );\n});\n\nUnstyledApp.propTypes = {\n  className: PropTypes.string.isRequired,\n};\n\nconst App = styled(UnstyledApp)`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n\n  form {\n    padding-top: 1em;\n  }\n\n  hr {\n    border: 1px solid #61dafb;\n    margin: 2em 0;\n  }\n\n  ul {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n`;\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}