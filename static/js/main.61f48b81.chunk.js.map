{"version":3,"sources":["ObservableTodoStore.js","TodoItem.jsx","TodoList.jsx","TodoStats.jsx","AddTodo.jsx","App.jsx","index.jsx"],"names":["observableTodoStore","this","todos","makeObservable","observable","sortedTodos","computed","completedTodosCount","incompletedTodosCount","totalTodosCount","loadTodos","action","addTodo","deleteTodoAt","autorun","console","info","report","saveTodos","filter","todo","completed","completedTodos","length","incompletedTodos","concat","nextTodo","find","text","push","completedAt","createdAt","Date","now","updatedAt","assignee","existingTodoDataString","window","localStorage","getItem","loadedTodos","JSON","parse","todoIndex","newTodos","splice","setTodos","setItem","stringify","UnstyledTodoItem","observer","className","index","handleDragStart","handleDragOver","handleDrop","todoId","todoKey","todoItemClassName","draggable","data-position","onDragStart","onDragOver","onDrop","type","id","checked","onChange","onClick","event","preventDefault","todoStore","TodoItem","styled","initialDnDState","draggedFrom","draggedTo","isDragging","originalOrder","updatedOrder","UnstyledTodoList","useState","dragAndDrop","setDragAndDrop","dragEvent","initialPosition","Number","currentTarget","dataset","position","dataTransfer","setData","todoDragged","remainingItems","item","slice","sortedTodoData","map","todoItem","incompletedTodoItems","completedTodoItems","completedEmptyStateMessage","incompletedEmptyStateMessage","TodoList","UnstyledTodoStats","lastAddedItem","sort","a","b","pop","lastAddedTime","toLocaleString","lastUpdatedItem","lastUpdatedTime","lastCompletedItem","lastCompletedTime","TodoStats","AddTodo","onSubmit","formSubmitEvent","todoElement","document","getElementById","newTodoText","value","placeholder","UnstyledApp","propTypes","PropTypes","string","isRequired","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.61f48b81.chunk.js","sourcesContent":["import { action, autorun, computed, makeObservable, observable } from \"mobx\";\n\nclass ObservableTodoStore {\n  constructor() {\n    this.todos = [];\n\n    makeObservable(this, {\n      todos: observable,\n      sortedTodos: computed,\n      completedTodosCount: computed,\n      incompletedTodosCount: computed,\n      totalTodosCount: computed,\n      loadTodos: action,\n      addTodo: action,\n      deleteTodoAt: action,\n    })\n    /* eslint-disable-next-line no-console */\n    autorun(() => console.info(this.report))\n    this.loadTodos();\n    autorun(() => this.saveTodos());\n  }\n\n  get completedTodos() {\n    return this.todos.filter(todo => todo.completed);\n  }\n\n  get completedTodosCount() {\n    return this.completedTodos.length;\n  }\n\n  get incompletedTodos() {\n    return this.todos.filter(todo => !todo.completed);\n  }\n\n  get incompletedTodosCount() {\n    return this.incompletedTodos.length;\n  }\n\n  get totalTodosCount() {\n    return this.todos.length;\n  }\n\n  get sortedTodos() {\n    return this.incompletedTodos.concat(this.completedTodos);\n  }\n\n  get report() {\n    if (this.todos.length ===  0) {\n      return \"<none>\";\n    }\n    const nextTodo = this.todos.find(todo => todo.completed === false);\n    return `Next todo: \"${nextTodo ? nextTodo.text : \"<none>\"}\". ` +\n    `Progress: ${this.completedTodosCount}/${this.todos.length}}`;\n  }\n\n  addTodo(text) {\n    this.todos.push({\n      text,\n      completed: false,\n      completedAt: null,\n      createdAt: Date.now(),\n      updatedAt: Date.now(),\n      assignee: null,\n    });\n  }\n\n  loadTodos() {\n    // Load from localstorage if data is there\n    const existingTodoDataString = window.localStorage.getItem(\"tododata\");\n    if (!existingTodoDataString || existingTodoDataString === '') {\n      return;\n    }\n\n    const existingTodoData = JSON.parse(existingTodoDataString);\n    const loadedTodos = existingTodoData.todos;\n    this.todos = loadedTodos;\n  }\n\n  deleteTodoAt(todoIndex) {\n    const { sortedTodos } = this;\n    const newTodos = [...sortedTodos];\n    newTodos.splice(todoIndex, 1);\n    this.setTodos(newTodos);\n  }\n\n  saveTodos() {\n    const { sortedTodos } = this;\n    window.localStorage.setItem(\"tododata\", JSON.stringify({ todos: sortedTodos }));\n  }\n\n  setTodos(newTodos) {\n    this.todos = newTodos;\n  }\n}\n\nconst observableTodoStore = new ObservableTodoStore();\nexport { observableTodoStore as default, ObservableTodoStore };","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport PropTypes from \"prop-types\";\nimport { observer } from 'mobx-react-lite';\nimport todoStore from \"./ObservableTodoStore\";\n\n\nconst UnstyledTodoItem = observer(({\n  className,\n  index,\n  todo,\n  handleDragStart,\n  handleDragOver,\n  handleDrop,\n}) => {\n  const { completed, text } = todo;\n  const todoId = `todoItem${index}`;\n  const todoKey = `${index}`;\n  const todoItemClassName = completed ? \"disabled\" : \"\";\n\n  const toggleCompleted = () => {\n    /* eslint-disable no-param-reassign */\n    todo.completed = !todo.completed\n    if (todo.completed) {\n      todo.completedAt = Date.now();\n    } else {\n      todo.completedAt = null;\n    }\n    todo.updatedAt = Date.now();\n    /* eslint-enable no-param-reassign */\n  };\n\n  const handleDelete = (event) => {\n    event.preventDefault();\n    todoStore.deleteTodoAt(index)\n  };\n\n  return (\n    <li\n      key={todoKey}\n      className={`${className} ${todoItemClassName}`}\n      draggable\n      data-position={index}\n      onDragStart={handleDragStart}\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n    >\n\n      { /* eslint-disable-next-line jsx-a11y/label-has-associated-control */ }\n      <label>\n        <span className=\"dragIcon\">≔</span>\n        <input\n          type=\"checkbox\"\n          id={todoId}\n          checked={completed}\n          onChange={toggleCompleted}\n        />\n        <span className=\"todoText\">{text}</span>\n        <button type=\"button\" className=\"delete\" onClick={handleDelete}>\n          x\n        </button>\n      </label>\n    </li>\n  );\n});\n\nUnstyledTodoItem.propTypes = {\n  className: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  todo: PropTypes.shape({ text: PropTypes.string.isRequired, completed: PropTypes.bool.isRequired}).isRequired,\n  handleDragStart: PropTypes.func.isRequired,\n  handleDragOver: PropTypes.func.isRequired,\n  handleDrop: PropTypes.func.isRequired,\n};\n\nconst TodoItem = styled(UnstyledTodoItem)`\n  width: 100%;\n\n  label {\n    border: 1px solid #61dafb;\n    padding: 1em;\n    margin: 0 0 1em;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    :hover {\n      background: #c5ffff;\n      cursor: pointer;\n      color: #3c4048;\n    }\n\n    span.todoText {\n      flex-grow: 2;\n    }\n  }\n\n  input[type=\"checkbox\"] {\n    margin-right: 1em;\n    min-width: 2em;\n    min-height: 2em;\n  }\n\n  &.disabled {\n    label {\n      color: grey;\n      border: 1px solid grey;\n\n      :hover {\n        background: #464a52;\n        cursor: pointer;\n      }\n    }\n\n    input[type=\"checkbox\"] {\n      border: 1px solid grey;\n      opacity: 0.5;\n    }\n  }\n\n  .delete {\n    opacity: 0.75;\n    background-color: darkred;\n    border: 1px solid red;\n    border-radius: 2px;\n    height: 2em;\n    width: 2em;\n    color: white;\n    text-align: center;\n  }\n\n  .dragIcon {\n    cursor: grab;\n  }\n`;\n\nexport default TodoItem;\n","import React, { useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport PropTypes from \"prop-types\";\nimport { observer } from 'mobx-react-lite';\nimport TodoItem from \"./TodoItem\";\nimport todoStore from \"./ObservableTodoStore\";\n\n  // Following drag and drop tutorial at\n  // https://dev.to/florantara/creating-a-drag-and-drop-list-with-react-hooks-4c0i\n  const initialDnDState = {\n    draggedFrom: null,\n    draggedTo: null,\n    isDragging: false,\n    originalOrder: [],\n    updatedOrder: [],\n  }\n\nconst UnstyledTodoList = observer(({\n  className,\n}) => {\n  const {\n    sortedTodos,\n    completedTodosCount,\n    incompletedTodosCount,\n    totalTodosCount,\n   } = todoStore;\n\n  const [dragAndDrop, setDragAndDrop] = useState(initialDnDState);\n\n  const handleDragStart = (dragEvent) => {\n    // Access the \"data-position\" attr of the current element being dragged\n    const initialPosition = Number(dragEvent.currentTarget.dataset.position);\n\n    setDragAndDrop({\n      ...dragAndDrop,\n      draggedFrom: initialPosition,\n      isDragging: true,\n      originalOrder: [...sortedTodos],\n    });\n\n    // Note: This is only needed for Firefox.\n    // Otherwise, DragAndDrop won't work.\n    // But we aren't using it.\n    dragEvent.dataTransfer.setData('text/html', '');\n  };\n\n  const handleDragOver = (dragEvent) => {\n    dragEvent.preventDefault();\n\n    let newTodos = dragAndDrop.originalOrder;\n    const { draggedFrom } = dragAndDrop;\n\n    // Index of the drop area being hovered\n    const draggedTo = Number(dragEvent.currentTarget.dataset.position);\n    // Get the element that's at the position of 'draggedFrom'\n    const todoDragged = newTodos[draggedFrom];\n    const remainingItems = newTodos.filter((item, index) => index !== draggedFrom);\n\n    // Update the list\n    newTodos = [\n      ...remainingItems.slice(0, draggedTo),\n      todoDragged,\n      ...remainingItems.slice(draggedTo),\n    ];\n\n    // Since this event fires many times, check if the targets are different\n    // before updating.\n    if(draggedTo !== dragAndDrop.draggedTo) {\n      setDragAndDrop({...dragAndDrop,\n      updatedOrder: newTodos,\n      draggedTo,\n    })\n    }\n  };\n\n  const handleDrop = () => {\n    todoStore.setTodos(dragAndDrop.updatedOrder);\n\n    // Reset the state of the drag and drop\n    setDragAndDrop({\n      ...dragAndDrop,\n      draggedFrom: null,\n      draggedTo: null,\n      isDragging: false,\n    });\n  }\n\n  const sortedTodoData = sortedTodos.map((todoItem, todoIndex) => {\n    const todoKey = `${todoIndex}`;\n\n    return {\n        completed: todoItem.completed,\n        item: (\n          <TodoItem\n            key={todoKey}\n            index={todoIndex}\n            todo={todoItem}\n            handleDragStart={handleDragStart}\n            handleDragOver={handleDragOver}\n            handleDrop={handleDrop}\n          />\n        ),\n    };\n  });\n\n  const incompletedTodoItems  = sortedTodoData\n    .filter(({completed}) => !completed)\n    .map(({item}) => item);\n\n\n  const completedTodoItems  = sortedTodoData\n    .filter(({completed}) => completed)\n    .map(({item}) => item);\n\n  const completedEmptyStateMessage = (\n    <li>\n      <p>Try checking off a Todo above!</p>\n    </li>\n  );\n\n  const incompletedEmptyStateMessage = (\n    <li>\n      <p>Try adding a Todo above!</p>\n    </li>\n  );\n\n  return (\n    <div className={className}>\n      <div className='todoGroup'>\n        <h1>Todo ({incompletedTodosCount}/{totalTodosCount})</h1>\n        <ul>\n          {incompletedTodosCount > 0 ? incompletedTodoItems : incompletedEmptyStateMessage}\n        </ul>\n      </div>\n\n      <div className='todoGroup'>\n        <h1>Done ({completedTodosCount}/{totalTodosCount})</h1>\n        <ul>\n          {completedTodosCount > 0 ? completedTodoItems : completedEmptyStateMessage}\n        </ul>\n      </div>\n    </div>\n  );\n});\n\nUnstyledTodoList.propTypes = {\n  className: PropTypes.string.isRequired,\n};\n\nconst TodoList = styled(UnstyledTodoList)`\n  min-width: 25vwmin;\n  width: 50vw;\n  border-right: 5px solid #61dafb;\n  display: flex;\n  flex-direction: column;\n\n  .todoGroup {\n    padding-right: 2vw;\n    display: flex;\n    flex-direction: column;\n\n    h1 {\n      border-right: 0;\n    }\n\n    ul {\n      padding-left: 1em;;\n      border: 0;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n\n      li {\n        /* Specify this style here so the empty state will get it too. */\n        list-style: none;\n      }\n    }\n  }\n\n  @media screen and (max-width: 480px) {\n    width: 85vw;\n    border-right: 0px;\n    border-bottom: 5px solid #61dafb;\n\n    .todoGroup {\n      padding-right: 0;\n      padding-bottom: 2vw;\n    }\n  }\n`;\n\nexport default TodoList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"@emotion/styled\";\nimport { observer } from 'mobx-react-lite';\nimport todoStore from \"./ObservableTodoStore\";\n\nconst UnstyledTodoStats = observer(({ className }) => {\n  const { completedTodos, completedTodosCount, incompletedTodosCount, todos, totalTodosCount } = todoStore;\n  const lastAddedItem = todos.slice().sort((a, b) => (a.createdAt - b.createdAt)).pop();\n  const lastAddedDate = new Date(lastAddedItem?.createdAt);\n  const lastAddedTime = lastAddedDate.toLocaleString();\n\n\n  const lastUpdatedItem = todos.slice().sort((a, b) => (a.updatedAt - b.updatedAt)).pop();\n  const lastUpdatedDate = new Date(lastUpdatedItem?.updatedAt);\n  const lastUpdatedTime = lastUpdatedDate.toLocaleString();\n\n  const lastCompletedItem = completedTodos.slice().sort((a, b) => (\n    a.completedAt - b.completedAt\n  )).pop();\n  const lastCompletedDate = new Date(lastCompletedItem?.completedAt);\n  const lastCompletedTime = lastCompletedDate.toLocaleString();\n\n  return (\n    <div className={className}>\n      <h1>Stats</h1>\n      <p>Total Todos: {totalTodosCount}</p>\n      <p>Completed Todos: {completedTodosCount}</p>\n      <p>Incompleted Todos: {incompletedTodosCount}</p>\n      {lastCompletedItem && (\n        <p>Item Last Completed At: {lastCompletedTime}</p>\n      )}\n      {lastAddedItem && (\n        <p>Item Last Added At: {lastAddedTime}</p>\n      )}\n      {lastUpdatedItem && (\n        <p>Item Last Updated At: {lastUpdatedTime}</p>\n      )}\n    </div>\n  )\n});\n\nUnstyledTodoStats.propTypes = {\n  className: PropTypes.string.isRequired,\n};\n\nconst TodoStats = styled(UnstyledTodoStats)`\n  display: flex;\n  flex-direction: column;\n  color: white;\n  min-width: 15vwmin;\n  width: 20vw;\n\n\n  p {\n    padding-left: 1em;\n    font-size: calc(8px + 1.5vmin);\n  }\n\n  @media screen and (max-width: 480px) {\n    width: 85vw;\n  }\n`;\n\nexport default TodoStats;","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport PropTypes from \"prop-types\";\nimport todoStore from \"./ObservableTodoStore\";\n\nfunction UnstyledAddTodo({ className }) {\n  const handleAddTodo = (formSubmitEvent) => {\n    formSubmitEvent.preventDefault();\n\n    const todoElement = document.getElementById(\"addTodo\");\n    const newTodoText = todoElement.value;\n\n    todoStore.addTodo(newTodoText)\n    todoElement.value = \"\";\n  };\n\n  return (\n    <form onSubmit={handleAddTodo}>\n      <div className={className}>\n        <input type=\"text\" id=\"addTodo\" placeholder=\"Add a Todo\" />\n      </div>\n    </form>\n  );\n}\n\nUnstyledAddTodo.propTypes = {\n  className: PropTypes.string.isRequired,\n};\n\nconst AddTodo = styled(UnstyledAddTodo)`\n  padding-top: 5vh;\n\n  input[type=\"text\"] {\n    font-size: calc(8px + 1.5vmin);\n    border: 1px solid #61dafb;\n    border-radius: 0.5em;\n    padding: 1em;\n    margin: 0 0 1em;\n    display: block;\n    width: 80vw;\n    color: white;\n    background: #3c4048;\n  }\n\n  input::placeholder {\n    color: #118aab;\n  }\n`;\n\nexport default AddTodo;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"@emotion/styled\";\nimport { observer } from 'mobx-react-lite';\nimport TodoList from \"./TodoList\";\nimport TodoStats from \"./TodoStats\";\nimport AddTodo from \"./AddTodo\";\n\nconst UnstyledApp = observer(({ className }) => (\n    <div className={className}>\n      <AddTodo />\n\n      <hr />\n\n     <div className=\"sideBySide\">\n        <TodoList />\n\n      <TodoStats />\n     </div>\n    </div>\n  ));\n\nUnstyledApp.propTypes = {\n  className: PropTypes.string.isRequired,\n};\n\nconst App = styled(UnstyledApp)`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 1.5vmin);\n  color: white;\n\n  hr {\n    border: 1px solid #61dafb;\n    margin: 2em 0;\n    width: 80vw;\n  }\n\n  .sideBySide {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    gap: 2vw;\n  }\n\n  h1 {\n    font-size: calc(10px + 1.5vmin);\n    width: 50%;\n    color: #61dafb;;\n    border-bottom: 2px solid #61dafb;\n  }\n\n  @media screen and (max-width: 480px) {\n    border-right: 0px;\n    border-bottom: 5px solid #61dafb;\n\n    .sideBySide {\n      flex-direction: column;\n    }\n  }\n`;\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}