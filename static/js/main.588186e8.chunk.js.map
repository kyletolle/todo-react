{"version":3,"sources":["ObservableTodoStore.js","TodoItem.jsx","TodoList.jsx","TodoStats.jsx","AddTodo.jsx","App.jsx","index.jsx"],"names":["observableTodoStore","this","todos","makeObservable","observable","completedTodosCount","computed","incompletedTodosCount","totalTodosCount","loadTodos","action","addTodo","deleteTodoAt","autorun","console","info","report","saveTodos","filter","todo","completed","completedTodos","length","incompletedTodos","nextTodo","find","text","push","completedAt","createdAt","Date","now","updatedAt","assignee","existingTodoDataString","window","localStorage","getItem","loadedTodos","JSON","parse","todoIndex","newTodos","splice","setTodos","setItem","stringify","UnstyledTodoItem","observer","className","index","handleDragStart","handleDragOver","handleDrop","todoId","todoKey","todoItemClassName","draggable","data-position","onDragStart","onDragOver","onDrop","type","id","checked","onChange","onClick","event","preventDefault","todoStore","TodoItem","styled","UnstyledTodoList","incompletedTodoItems","map","todoItem","completedTodoItems","completedEmptyStateMessage","incompletedEmptyStateMessage","TodoList","UnstyledTodoStats","TodoStats","AddTodo","onSubmit","formSubmitEvent","todoElement","document","getElementById","newTodoText","value","placeholder","initialDnDState","draggedFrom","draggedTo","isDragging","originalOrder","updatedOrder","UnstyledApp","useState","dragAndDrop","setDragAndDrop","dragEvent","initialPosition","Number","currentTarget","dataset","position","dataTransfer","setData","todoDragged","remainingItems","item","slice","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.588186e8.chunk.js","sourcesContent":["import { action, autorun, computed, makeObservable, observable } from \"mobx\";\n\nclass ObservableTodoStore {\n  constructor() {\n    this.todos = [];\n\n    makeObservable(this, {\n      todos: observable,\n      completedTodosCount: computed,\n      incompletedTodosCount: computed,\n      totalTodosCount: computed,\n      loadTodos: action,\n      addTodo: action,\n      deleteTodoAt: action,\n    })\n    /* eslint-disable-next-line no-console */\n    autorun(() => console.info(this.report))\n    this.loadTodos();\n    autorun(() => this.saveTodos());\n  }\n\n  get completedTodos() {\n    return this.todos.filter(\n      todo => todo.completed === true\n    );\n  }\n\n  get completedTodosCount() {\n    return this.completedTodos.length;\n  }\n\n  get incompletedTodos() {\n    return this.todos.filter(\n      todo => todo.completed === false\n    );\n  }\n\n  get incompletedTodosCount() {\n    return this.incompletedTodos.length;\n  }\n\n  get totalTodosCount() {\n    return this.todos.length;\n  }\n\n  get report() {\n    if (this.todos.length ===  0) {\n      return \"<none>\";\n    }\n    const nextTodo = this.todos.find(todo => todo.completed === false);\n    return `Next todo: \"${nextTodo ? nextTodo.text : \"<none>\"}\". ` +\n    `Progress: ${this.completedTodosCount}/${this.todos.length}}`;\n  }\n\n  addTodo(text) {\n    this.todos.push({\n      text,\n      completed: false,\n      completedAt: null,\n      createdAt: Date.now(),\n      updatedAt: Date.now(),\n      assignee: null,\n    });\n  }\n\n  loadTodos() {\n    // Load from localstorage if data is there\n    const existingTodoDataString = window.localStorage.getItem(\"tododata\");\n    if (!existingTodoDataString) {\n      return;\n    }\n\n    const existingTodoData = JSON.parse(existingTodoDataString);\n    const loadedTodos = existingTodoData.todos;\n    this.todos = loadedTodos;\n  }\n\n  deleteTodoAt(todoIndex) {\n    const { todos } = this;\n    const newTodos = [...todos];\n    newTodos.splice(todoIndex, 1);\n    this.setTodos(newTodos);\n  }\n\n  saveTodos() {\n    const { todos } = this;\n    window.localStorage.setItem(\"tododata\", JSON.stringify({ todos }));\n  }\n\n  setTodos(newTodos) {\n    this.todos = newTodos;\n  }\n}\n\nconst observableTodoStore = new ObservableTodoStore();\nexport { observableTodoStore as default, ObservableTodoStore };","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport PropTypes from \"prop-types\";\nimport { observer } from 'mobx-react-lite';\nimport todoStore from \"./ObservableTodoStore\";\n\n\nconst UnstyledTodoItem = observer(({\n  className,\n  index,\n  todo,\n  handleDragStart,\n  handleDragOver,\n  handleDrop,\n}) => {\n  const { completed, text } = todo;\n  const todoId = `todoItem${index}`;\n  const todoKey = `${index}`;\n  const todoItemClassName = completed ? \"disabled\" : \"\";\n\n  const toggleCompleted = () => {\n    // eslint-disable-next-line no-param-reassign\n    todo.completed = !todo.completed\n  };\n\n  const handleDelete = (event) => {\n    event.preventDefault();\n    todoStore.deleteTodoAt(index)\n  };\n\n  return (\n    <li\n      key={todoKey}\n      className={`${className} ${todoItemClassName}`}\n      draggable\n      data-position={index}\n      onDragStart={handleDragStart}\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n    >\n\n      { /* eslint-disable-next-line jsx-a11y/label-has-associated-control */ }\n      <label>\n        <span className=\"dragIcon\">â‰”</span>\n        <input\n          type=\"checkbox\"\n          id={todoId}\n          checked={completed}\n          onChange={toggleCompleted}\n        />\n        <span className=\"todoText\">{text}</span>\n        <button type=\"button\" className=\"delete\" onClick={handleDelete}>\n          x\n        </button>\n      </label>\n    </li>\n  );\n});\n\nUnstyledTodoItem.propTypes = {\n  className: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  todo: PropTypes.shape({ text: PropTypes.string.isRequired, completed: PropTypes.bool.isRequired}).isRequired,\n  handleDragStart: PropTypes.func.isRequired,\n  handleDragOver: PropTypes.func.isRequired,\n  handleDrop: PropTypes.func.isRequired,\n};\n\nconst TodoItem = styled(UnstyledTodoItem)`\n  width: 100%;\n\n  label {\n    border: 1px solid #61dafb;\n    padding: 1em;\n    margin: 0 0 1em;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    :hover {\n      background: #c5ffff;\n      cursor: pointer;\n      color: #3c4048;\n    }\n\n    span.todoText {\n      flex-grow: 2;\n    }\n  }\n\n  input[type=\"checkbox\"] {\n    margin-right: 1em;\n    min-width: 2em;\n    min-height: 2em;\n  }\n\n  &.disabled {\n    label {\n      color: grey;\n      border: 1px solid grey;\n\n      :hover {\n        background: #464a52;\n        cursor: pointer;\n      }\n    }\n\n    input[type=\"checkbox\"] {\n      border: 1px solid grey;\n      opacity: 0.5;\n    }\n  }\n\n  .delete {\n    opacity: 0.75;\n    background-color: darkred;\n    border: 1px solid red;\n    border-radius: 2px;\n    height: 2em;\n    width: 2em;\n    color: white;\n    text-align: center;\n  }\n\n  .dragIcon {\n    cursor: grab;\n  }\n`;\n\nexport default TodoItem;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport PropTypes from \"prop-types\";\nimport { observer } from 'mobx-react-lite';\nimport TodoItem from \"./TodoItem\";\nimport todoStore from \"./ObservableTodoStore\";\n\nconst UnstyledTodoList = observer(({\n  className,\n  handleDragStart,\n  handleDragOver,\n  handleDrop,\n}) => {\n  const {\n    completedTodos,\n    completedTodosCount,\n    incompletedTodos,\n    incompletedTodosCount,\n   } = todoStore;\n\n  const incompletedTodoItems = incompletedTodos.map((todoItem, todoIndex) => {\n    const todoKey = `${todoIndex}`;\n    return (\n      <TodoItem\n        key={todoKey}\n        index={todoIndex}\n        todo={todoItem}\n        handleDragStart={handleDragStart}\n        handleDragOver={handleDragOver}\n        handleDrop={handleDrop}\n      />\n    );\n  });\n\n  const completedTodoItems = completedTodos.map((todoItem, todoIndex) => {\n    const todoKey = `${todoIndex}`;\n    return (\n      <TodoItem\n        key={todoKey}\n        index={todoIndex}\n        todo={todoItem}\n        handleDragStart={handleDragStart}\n        handleDragOver={handleDragOver}\n        handleDrop={handleDrop}\n      />\n    );\n  });\n\n  const completedEmptyStateMessage = (\n    <li>\n      <p>Try checking off a Todo above!</p>\n    </li>\n  );\n\n  const incompletedEmptyStateMessage = (\n    <li>\n      <p>Try adding a Todo above!</p>\n    </li>\n  );\n\n  return (\n    <div className={className}>\n      <div className='todoGroup'>\n        <h1>Todo</h1>\n        <ul>\n          {incompletedTodosCount > 0 ? incompletedTodoItems : incompletedEmptyStateMessage}\n        </ul>\n      </div>\n\n      <div className='todoGroup'>\n        <h1 className={className}>Done</h1>\n        <ul>\n          {completedTodosCount > 0 ? completedTodoItems : completedEmptyStateMessage}\n        </ul>\n      </div>\n    </div>\n  );\n});\n\nUnstyledTodoList.propTypes = {\n  className: PropTypes.string.isRequired,\n  handleDragStart: PropTypes.func.isRequired,\n  handleDragOver: PropTypes.func.isRequired,\n  handleDrop: PropTypes.func.isRequired,\n};\n\nconst TodoList = styled(UnstyledTodoList)`\n  min-width: 25vwmin;\n  width: 50vw;\n  border-right: 5px solid #61dafb;\n  display: flex;\n  flex-direction: column;\n\n  .todoGroup {\n    padding-right: 2vw;\n    display: flex;\n    flex-direction: column;\n\n    h1 {\n      border-right: 0;\n    }\n\n    ul {\n      padding-left: 1em;;\n      border: 0;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n\n      li {\n        /* Specify this style here so the empty state will get it too. */\n        list-style: none;\n      }\n    }\n  }\n\n  @media screen and (max-width: 480px) {\n    width: 85vw;\n    border-right: 0px;\n    border-bottom: 5px solid #61dafb;\n\n    .todoGroup {\n      padding-right: 0;\n      padding-bottom: 2vw;\n    }\n  }\n`;\n\nexport default TodoList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"@emotion/styled\";\nimport { observer } from 'mobx-react-lite';\nimport todoStore from \"./ObservableTodoStore\";\n\nconst UnstyledTodoStats = observer(({ className }) => {\n  const { completedTodosCount, incompletedTodosCount, totalTodosCount } = todoStore;\n  return (\n    <div className={className}>\n      <h1>Stats</h1>\n      <p>Total Todos: {totalTodosCount}</p>\n      <p>Completed Todos: {completedTodosCount}</p>\n      <p>Incompleted Todos: {incompletedTodosCount}</p>\n    </div>\n  )\n});\n\nUnstyledTodoStats.propTypes = {\n  className: PropTypes.string.isRequired,\n};\n\nconst TodoStats = styled(UnstyledTodoStats)`\n  display: flex;\n  flex-direction: column;\n  color: white;\n  min-width: 15vwmin;\n  width: 20vw;\n\n\n  p {\n    padding-left: 1em;\n    font-size: calc(8px + 1.5vmin);\n  }\n\n  @media screen and (max-width: 480px) {\n    width: 85vw;\n  }\n`;\n\nexport default TodoStats;","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport PropTypes from \"prop-types\";\nimport todoStore from \"./ObservableTodoStore\";\n\nfunction UnstyledAddTodo({ className }) {\n  const handleAddTodo = (formSubmitEvent) => {\n    formSubmitEvent.preventDefault();\n\n    const todoElement = document.getElementById(\"addTodo\");\n    const newTodoText = todoElement.value;\n\n    todoStore.addTodo(newTodoText)\n    todoElement.value = \"\";\n  };\n\n  return (\n    <form onSubmit={handleAddTodo}>\n      <div className={className}>\n        <input type=\"text\" id=\"addTodo\" placeholder=\"Add a Todo\" />\n      </div>\n    </form>\n  );\n}\n\nUnstyledAddTodo.propTypes = {\n  className: PropTypes.string.isRequired,\n};\n\nconst AddTodo = styled(UnstyledAddTodo)`\n  padding-top: 5vh;\n\n  input[type=\"text\"] {\n    font-size: calc(8px + 1.5vmin);\n    border: 1px solid #61dafb;\n    border-radius: 0.5em;\n    padding: 1em;\n    margin: 0 0 1em;\n    display: block;\n    width: 80vw;\n    color: white;\n    background: #3c4048;\n  }\n\n  input::placeholder {\n    color: #118aab;\n  }\n`;\n\nexport default AddTodo;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"@emotion/styled\";\nimport { observer } from 'mobx-react-lite';\nimport TodoList from \"./TodoList\";\nimport TodoStats from \"./TodoStats\";\nimport AddTodo from \"./AddTodo\";\nimport todoStore from \"./ObservableTodoStore\";\n\n// Following drag and drop tutorial at\n// https://dev.to/florantara/creating-a-drag-and-drop-list-with-react-hooks-4c0i\nconst initialDnDState = {\n  draggedFrom: null,\n  draggedTo: null,\n  isDragging: false,\n  originalOrder: [],\n  updatedOrder: [],\n}\n\nconst UnstyledApp = observer(({ className }) => {\n  const { todos } = todoStore;\n  const [dragAndDrop, setDragAndDrop] = useState(initialDnDState);\n\n  const handleDragStart = (dragEvent) => {\n    // Access the \"data-position\" attr of the current element being dragged\n    const initialPosition = Number(dragEvent.currentTarget.dataset.position);\n\n    setDragAndDrop({\n      ...dragAndDrop,\n      draggedFrom: initialPosition,\n      isDragging: true,\n      originalOrder: todos,\n    });\n\n    // Note: This is only needed for Firefox.\n    // Otherwise, DragAndDrop won't work.\n    // But we aren't using it.\n    dragEvent.dataTransfer.setData('text/html', '');\n  };\n\n  const handleDragOver = (dragEvent) => {\n    dragEvent.preventDefault();\n\n    let newTodos = dragAndDrop.originalOrder;\n    const { draggedFrom } = dragAndDrop;\n\n    // Index of the drop area being hovered\n    const draggedTo = Number(dragEvent.currentTarget.dataset.position);\n    // Get the element that's at the position of 'draggedFrom'\n    const todoDragged = newTodos[draggedFrom];\n    const remainingItems = newTodos.filter((item, index) => index !== draggedFrom);\n\n    // Update the list\n    newTodos = [\n      ...remainingItems.slice(0, draggedTo),\n      todoDragged,\n      ...remainingItems.slice(draggedTo),\n    ];\n\n    // Since this event fires many times, check if the targets are different\n    // before updating.\n    if(draggedTo !== dragAndDrop.draggedTo) {\n      setDragAndDrop({...dragAndDrop,\n      updatedOrder: newTodos,\n      draggedTo,\n    })\n    }\n  };\n\n  const handleDrop = () => {\n    todoStore.setTodos(dragAndDrop.updatedOrder);\n\n    // Reset the state of the drag and drop\n    setDragAndDrop({\n      ...dragAndDrop,\n      draggedFrom: null,\n      draggedTo: null,\n      isDragging: false,\n    });\n  }\n\n  return (\n    <div className={className}>\n      <AddTodo />\n\n      <hr />\n\n     <div className=\"sideBySide\">\n        <TodoList\n          todoStore={todoStore}\n          handleDragStart={handleDragStart}\n          handleDragOver={handleDragOver}\n          handleDrop={handleDrop}\n        />\n\n      <TodoStats />\n     </div>\n    </div>\n  );\n});\n\nUnstyledApp.propTypes = {\n  className: PropTypes.string.isRequired,\n};\n\nconst App = styled(UnstyledApp)`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 1.5vmin);\n  color: white;\n\n  hr {\n    border: 1px solid #61dafb;\n    margin: 2em 0;\n    width: 80vw;\n  }\n\n  .sideBySide {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    gap: 2vw;\n  }\n\n  h1 {\n    font-size: calc(10px + 1.5vmin);\n    width: 50%;\n    color: #61dafb;;\n    border-bottom: 2px solid #61dafb;\n  }\n\n  @media screen and (max-width: 480px) {\n    border-right: 0px;\n    border-bottom: 5px solid #61dafb;\n\n    .sideBySide {\n      flex-direction: column;\n    }\n  }\n`;\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}